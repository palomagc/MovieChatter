import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionGuia.objetivos.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGuia.tareas.*;
import icaro.aplicaciones.informacion.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Creacion de los objectivos iniciales"
  when 
  then 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end
// =======================================================================
// REGLAS DE FOCALIZACION INICIALES (OBTENER NOMBRE DEL CHAT Y RECONOCER AL USUARIO)
rule "Regla de focalizacion en objetivo ReconocerUsuario"
  when
    obj:ObtenerInfoInterlocutor()
    f:Focus(foco == null )
  then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end
//=======================================================================
//Reglas de Consecucion del Objetivo ObtenerInfoInterlocutor
rule "Inicio del proceso de consecucion del  objetivo ObtenerInfoInterlocutor"
  when
    obj:ObtenerInfoInterlocutor(state==Objetivo.PENDING)
    Focus(foco ==obj)
  then
    obj.setSolving();
    update(obj);
end
rule "Saludo Inicial y peticion de info"
  when
    obj:ObtenerInfoInterlocutor(state==Objetivo.SOLVING)
    Focus(foco == obj)
  then
    //recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : SolicitarDatosAcceso",InfoTraza.NivelTraza.debug));
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarInfoInicial.class);
    tarea.ejecutar(Vocabulario.IdentRecursoComunicacionChat);
    
    obj.setSolved();
    update(obj);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end



// REGLAS PARA BUSCAR EL USUARIO EN LA BASE DE DATOS (RECURSO)
rule "Regla para focalizar el objetivo en reconocer usuario"
  when
    objAntiguo:ObtenerInfoInterlocutor(state==Objetivo.SOLVED)
    obj:ReconocerUsuario(state==Objetivo.PENDING)
    f:Focus(foco == objAntiguo)
  then
    f.setFoco(obj);
    update(f);
    // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Inicio del proceso de consecucion del  objetivo ReconocerUsuario"
  when
    obj:ReconocerUsuario(state==Objetivo.PENDING)
    Focus(foco == obj)
  then
    obj.setSolving();
    update(obj);
    // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Comprobar si existe el usuario"
  when
    obj:ReconocerUsuario(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
  then
    // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : comprobar usuario",InfoTraza.NivelTraza.debug));
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(BuscarUsuario.class);
    tarea.ejecutar();
    
    obj.setSolved();
    update(obj);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end



// HACER PREGUNTAS INICIALES PARA CONOCER AL USUARIO Y TERMINACION DE LAS MISMAS
rule "Hacer las preguntas iniciales al usuario"
  when
    obj:ObtenerDatosIniciales(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
    f.setFoco(obj);
    update(f);
    
    //  Tareas para preguntar al usuario
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarCuestionarioInicial.class);
    tarea.ejecutar();
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "El usuario acepta hacer el cuestionario"
  when
    obj:ObtenerDatosIniciales(state==Objetivo.PENDING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionAfirmacion)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(LanzarObjetivoObtenerSexo.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "El usuario NO acepta hacer el cuestionario"
  when
    obj:ObtenerDatosIniciales(state==Objetivo.PENDING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionNegacion)
  then
    obj.setFailed();
    update(obj);
    retract(notif);
    // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "El usuario ha terminado el cuestionario o no lo quiere hacer"
  when
    obj:ObtenerDatosIniciales(state==Objetivo.SOLVED || state==Objetivo.FAILED)
  then
    // Focalizar la tarea de recomendar una peli
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(LanzarObjetivoRecomendarPelicula.class);
    tarea.ejecutar();
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end



// PREGUNTAS CONCRETAS DEL CUESTIONARIO
rule "Preguntar sexo usuario"
  when
    obj:ObtenerSexo(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarInfoSexo.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Recibir respuesta sexo usuario"
  when
    obj:ObtenerSexo(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotifica:tipoNotificacion, tipoNotificacion==Vocabulario.NombreTipoNotificacionSexoHombre || tipoNotificacion==Vocabulario.NombreTipoNotificacionSexoMujer)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GuardarSexo.class);
    tarea.ejecutar(tipoNotifica);
  
  	TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(LanzarObjetivoObtenerEdad.class);
    tarea1.ejecutar();
    
    obj.setSolved();
    update(obj);
    f.setFoco(obj);
    update(f);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Preguntar edad usuario"
  when
    obj:ObtenerEdad(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarInfoEdad.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Recibir respuesta edad usuario"
  when
    obj:ObtenerEdad(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionNumero)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GuardarEdad.class);
    tarea.ejecutar(notif);
    
    obj.setSolved();
    update(obj);
    f.setFoco(obj);
    update(f);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end



// REGLAS PARA RECOMENDAR PELI
rule "Poner el foco en recomendar peli y lanzar el objetivo del genero"
  when
    obj:RecomendarPelicula(state==Objetivo.PENDING)
    f:Focus()
  then
  	//  Tareas para preguntar al usuario que le apetece ver
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(LanzarObjetivoObtenerGenero.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Mirar si puedes deducir un genero, o preguntale"
  when
    obj:ObtenerGenero(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
    
    //  Tareas para preguntar al usuario o deducir que genero le apetece ver
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(DeducirGenero.class);
    tarea.ejecutar(obj);
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Dirigir agente guia"
  when
    objAntiguo:RecomendarPelicula()
    obj:ObtenerGenero()
    f:Focus()
	notif:Notificacion(tipoNotifica:tipoNotificacion, mensaje:mensajeNotificacion,
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroAccion ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroAventura ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroAnimacion ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroComedia ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroCrimen ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroDocumental ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroDrama ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroFamiliar ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroFantasia ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroExtranjero ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroHistorico ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroTerror ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroMusical ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroMisterio ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroRomantico ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroCienciaFiccion ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroTV ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroSuspense ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroGuerra ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionGeneroOeste ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionAnos ||
        tipoNotificacion==Vocabulario.NombreTipoNotificacionActor)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(EnviarAgenteTMDB.class);
    tarea.ejecutar(tipoNotifica, mensaje);
    obj.setSolved();
    update(obj);
    objAntiguo.setSolving();
    update(objAntiguo);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Mirar si puedes deducir un actor, o preguntale"
  when
    obj:ObtenerActor(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
    
    //  Tareas para preguntar al usuario que actor le apetece ver
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(DeducirActor.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Recibir agente TMDB"
  when
    notif:Notificacion(tipoNotifica:tipoNotificacion, tipoNotificacion==Vocabulario.NombreTipoNotificacionComprobarDatosBusqueda)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(LanzarObjetivoObtenerPelicula.class);
    tarea.ejecutar();
    
    // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Proponer una pelicula por objetivo"
  when
    objAntiguo:RecomendarPelicula(state==Objetivo.SOLVING)
    obj:ObtenerPelicula(state==Objetivo.PENDING)
    f:Focus(foco != obj)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProponerPelicula.class);
    tarea.ejecutar(obj, objAntiguo);
    
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Obtener datos de una peli, si o no deseada"
  when
    objAntiguo:RecomendarPelicula(state==Objetivo.SOLVING)
    obj:ObtenerPelicula(state==Objetivo.SOLVING)
    // TODO este foco no se si es asi
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotifica:tipoNotificacion, tipoNotificacion==Vocabulario.NombreTipoNotificacionNegacion
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionAfirmacion)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProponerOtraPelicula.class);
    tarea.ejecutar(tipoNotifica, objAntiguo);
    
    obj.setSolved();
    update(obj);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "El usuario dice que ha visto la pelicula que le estamos recomendando"
  when
    obj:ObtenerPelicula(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionYaVista)
  then
    // Lanzar el objetivo para valorar la peli que hemos recomendado
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(LanzarObjetivoObtenerValoracion.class);
    tarea.ejecutar();
    
    obj.setSolved();
    update(obj);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end

rule "Pedir valoracion pelicula"
  when
    obj:ObtenerValoracion(state==Objetivo.PENDING)
    f:Focus()
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarValoracion.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Recibir valoracion pelicula(Negacion/Nota)"
  when
    objAntiguo:RecomendarPelicula(state==Objetivo.SOLVING)
    obj:ObtenerValoracion(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionNota
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionNegacion
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionValoracionPositiva
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionValoracionNegativa)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GuardarValoracion.class);
    tarea.ejecutar(notif, objAntiguo);
    
	obj.setSolved();
	update(obj);
	f.setFoco(obj);
	update(f);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end






rule "Pedir valoracion ultima pelicula"
  when
    obj:ObtenerUltimaValoracion(state==Objetivo.PENDING)
    f:Focus()
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarUltimaValoracion.class);
    tarea.ejecutar();
    
    obj.setSolving();
    update(obj);
    f.setFoco(obj);
    update(f);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end
rule "Recibir valoracion ultima pelicula(Negacion/Nota)"
  when
    obj:ObtenerUltimaValoracion(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionNota
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionNegacion
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionValoracionPositiva
        || tipoNotificacion==Vocabulario.NombreTipoNotificacionValoracionNegativa)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GuardarValoracion.class);
    tarea.ejecutar(notif, null);
    
	obj.setSolved();
	update(obj);
	f.setFoco(obj);
	update(f);
    retract(notif);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end






rule "Recibir valoracion pelicula(Afirmacion)"
  when
    objAntiguo:RecomendarPelicula(state==Objetivo.SOLVING)
    obj:ObtenerValoracion(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion==Vocabulario.NombreTipoNotificacionAfirmacion)
  then
  	
    retract(notif);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end



// REGLAS DE BIENVENIDA, DESPEDIDA Y NO ENTIENDO
rule "Saludo Inicial al interlocutor y peticion de datos iniciales"
  when
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==Vocabulario.NombreTipoNotificacionSaludo)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludarYPresentarFuncionalidad.class);
    tarea.ejecutar(identInterlc);
end
rule "Despedida"
  when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==Vocabulario.NombreTipoNotificacionDespedida)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(Despedirse.class);
    tarea.ejecutar(identInterlc);
end
rule "No hay extraccion semantica del texto del interlocutor"
  when
  	f:Focus();
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==Vocabulario.ExtraccionSemanticaNull)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(NoEntender.class);
    tarea.ejecutar(f);
    
    retract(notif);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end





// TODO de que va/resumen hacer reglas que digan el argumento de la peli
rule "El usuario quiere saber de que va la peli"
  when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==Vocabulario.NombreTipoNotificacionArgumento)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(DecirArgumentoPeli.class);
    tarea.ejecutar();
    
    retract(notif);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end





// TODO Preguntar que si quiere ver 10 de golpe, de momento lo que vamos a hacer es ponerselas para que lo sepa, pero le ofrecemos una en concreto





// A�adir anotaciones de insultos para redirigir la conversacion
rule "El usuario ha dicho alguna tonteria"
  when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==Vocabulario.NombreTipoNotificacionTonterias)
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(Tonteria.class);
    tarea.ejecutar();
    
    retract(notif);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end





// TODO RECONOCER UN ERROR DEL USUARIO, POR AHORA TAREA IMPOSIBLE, DEJAR PARA OTRO MOMENTO. POSIBLE SOLUCI�N ES PASARLE LA FRASE A GOOGLE Y QUE TE LA CORRIJA, UNA VEZ HECHO ESO SE LA PASAS AL EXTRACTOR SEM�NTICO.




/*
rule "Responder quien soy"
  when
  	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==VocabularioGestionCitas.NombreTipoNotificacionQuiensoyyquehago)
  then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(Quiensoy.class);
    tarea.ejecutar();
    
    retract(notif);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA : " + drools.getRule().getName());
end*/
